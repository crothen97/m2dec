8 点 DCT 高速アルゴリズム
8 点 DCT の高速アルゴリズムについて簡単に解説する。まず、8 点 DCT の計算式はつぎの通りである。

X_j = √(2/8) Σ_{i=0}^{7} C_j x_i cos[j(2i+1)π/16]

C_j = { 1/√2 ( j= 0 )
	1     ( else ) 

いま求めるのは、 X_j の 2√2 倍とし、それを y_j とする。

y_j= 2√2 X_j= Σ_{i=0}^{7}{ c_{i,j} x_i },

c_{i,j} = √2 C_j cos[j(2i+1)π/16]

c_n = √2 cos[nπ/16] とすると、c_{i,j} は次の表で表される。この表を眺めるだけでその規則性から計算が削減できることがわかってくる。たとえば、 j= 0, 4 は加減算のみで計算できるし、 j が偶数であれば、 i= 0 と i=7、 i=1 と i= 6 などの係数が同じであり、 j が奇数であれば、それらは符号だけが反転していることに気がつく。それらは先に加減算を行なってから乗算する。以下、このような規則性の利用をたどっていくだけで高速 DCT アルゴリズムがほとんど説明できる。

                表 13 DCT 計算の定数 C_{i,j} の値                      
    i\j |    0       1       2       3       4       5       6       7      
        0  |    1       c_1     c_2     c_3     1       c_5     c_6     c_7      
        1  |    1       c_3     c_6    -c_7    -1      -c_1    -c_2    -c_5      
        2  |    1       c_5    -c_6    -c_1    -1       c_7     c_2     c_3      
        3  |    1       c_7    -c_2    -c_5     1       c_3    -c_6    -c_1      
        4  |    1      -c_7    -c_2     c_5     1      -c_3    -c_6     c_1      
        5  |    1      -c_5    -c_6     c_1    -1      -c_7     c_2    -c_3      
        6  |    1      -c_3     c_6     c_7    -1       c_1    -c_2     c_5      
       7  |    1      -c_1     c_2    -c_3     1      -c_5     c_6    -c_7     

≪＝BACK　TOP∧　NEXT＝≫
・step 1:
この表の規則性を利用するために最初 8 回の加減算を行なう。偶数係数を求めるのに、 a' 〜 d' が、奇数係数を求めるのに、 a 〜 d が使われる。

a= x_0 - x_7         a'= x_0 + x_7
b= x_1 - x_6         b'= x_1 + x_6
c= x_2 - x_5         c'= x_2 + x_5
d= x_3 - x_4         d'= x_3 + x_4

≪＝BACK　TOP∧　NEXT＝≫
・step 2:
偶数係数はつぎのように表されるが、

e   = a' - d'        e' =  a' +  d'
f   = b' - c'        f' =  b' +  c'
y_4 = e' - f'        y_0=  e' +  f'
y_6 = c_6*e - c_2*f  y_2= c_2*e + c_6*f

c_6/c_2= √2 -1, c_2/c_6= √2 + 1 であるから、y_6, y_2 は、つぎのように 3 回の乗算と 3 回の加算で求められる。

g   = e - f          h   = √2 * f
y_6 = c_6*(g-h)      y_2 = c_2*(g+h)

≪＝BACK　TOP∧　NEXT＝≫
なお一般的に a,b,c を定数、 x, y を入力、x', y' を出力とする、

x' = a * x + b * y
y' = c * x + a * y

の形の計算は、

z = a * ( x + y )
x' = z + (b-a)* y
y' = z + (c-a)* x

とすることで、3 回の乗算と 3 回の加減算にすることができる。 ( (b-a), (c-a)は定数なので計算量に数えない。)

≪＝BACK　TOP∧　NEXT＝≫
・step 3:
奇数係数はつぎのように表されるが、これが 8 回の乗算と 12 回の加減算まで削減できる。

y_1 = c_1*a + c_3*b + c_5*c + c_7*d
y_3 = c_3*a - c_7*b - c_1*c - c_5*d
y_5 = c_5*a - c_1*b + c_7*c + c_3*d
y_7 = c_7*a - c_5*b + c_3*c - c_1*d

まず 2 x 2 の行列 ( c_n ) を、

( c_n )= √2 ( cos(th)  -sin(th)
               sin(th)  cos(th) )
        th= nπ/16

とする。そのとき、奇数係数は次のように表せる。なお、表示の都合で縦ベクトルも横に書く。

(y_3, y_5)= ( c_3 ) (a, d) - (c_{-1}) (c, b)
(y_7, y_1)= ( c_7 ) (a, d) + ( c_3 ) (c, b)

≪＝BACK　TOP∧　NEXT＝≫

ところが、

( c_7 )= [c_4]( c_3 ),
( c_3 )= [c_4](c_{-1}),
[c_4]= 1/√2( 1 -1 
              1  1 )

であるから、

(i, j)= ( c_3 )(a, d), 
(k, l)= (c_{-1})(c, b)

を先に求めておき、( 2 回の 回転 = 6 回の乗算 + 6 回の加減算)

(y_3, y_5)= (i, j) - (k, l)
(y_7, y_1)= [c_4]((i, j) + (k, l))

と、さらに 6 回の加減算と、2 回の 1/√2 の乗算で完了する。

step 1 の 8 回の加減算、step 2 の偶数係数に 3 回の乗算と 9 回の加減算、 step 3 の奇数係数に 8 回の乗算と 12 回の加減算、を合計して、11 回の乗算と 29 回の加減算が 8 点 DCT の計算量となる。以上 DCT の高速アルゴリズム を説明したが IDCT はこの計算を逆にたどることで計算でき、計算量は DCT と同じになる。 